diff --git a/src/music_track_listener.py b/src/music_track_listener.py
index f9237f9..803c47e 100644
--- src/music_track_listener.py
+++ src/music_track_listener.py
@@ -98,6 +98,40 @@ class MusicTrackListener(gobject.GObject):
 			'NameOwnerChanged', 'org.freedesktop.DBus',
 			arg0='net.sacredchao.QuodLibet')
 
+		## MPD
+		try:
+			import mpd
+			import os
+			self.mpdclient = mpd.MPDClient()
+			self.mpd_host = 'localhost'
+			self.mpd_port = 6600
+			self.mpd_pass = None
+			if os.environ.has_key('MPD_HOST'):
+				passNhost = os.environ['MPD_HOST'].split('@')
+				if len(passNhost) == 2:
+					self.mpd_pass = passNhost[0]
+					self.mpd_host = passNhost[1]
+				else:
+					self.mpd_host = passNhost[0]
+			if os.environ.has_key('MPD_PORT'):
+				self.mpd_port = os.environ['MPD_PORT']
+			self.mpdclient.connect(self.mpd_host, self.mpd_port)
+			if self.mpd_pass is not None:
+				self.mpdclient.password(self.mpd_pass)
+			if self.mpdclient.status()['state'] in ['pause', 'stop']:
+				self.mpd_paused = 0
+			else:
+				self.mpd_paused = 1
+			self.mpd_paused_before = self.mpd_paused
+			self.mpd_exists = True
+			self.mpd_is_here = True
+			self.mpd_current_song = None
+			gobject.timeout_add_seconds(10, self._mpd_check_status)
+			gobject.timeout_add_seconds(2, self._mpd_check_track_status)
+		except:
+			self.mpd_exists = False
+			self.mpd_is_here = False
+
 	def _player_name_owner_changed(self, name, old, new):
 		if not new:
 			self.emit('music-track-changed', None)
@@ -196,6 +230,67 @@ class MusicTrackListener(gobject.GObject):
 		info.duration = int(props.get('~#length', 0))
 		return info
 
+	def _mpd_check_status(self):
+		if self.mpd_exists is True:
+			try:
+				self.mpdclient.status()
+				self.mpd_is_here = True
+			except:
+				try:
+					self.mpdclient.disconnect()
+					self.mpdclient.connect(self.mpd_host, self.mpd_port)
+					if self.mpd_pass is not None:
+						self.mpdclient.password(self.mpd_pass)
+					self.mpd_is_here = True
+				except:
+					self.mpd_is_here = False
+		return True
+
+	def _mpd_check_track_status(self):
+		if not self.mpd_is_here:
+			return
+
+		try:
+			self.mpd_song = self.mpdclient.currentsong()
+			info =  MusicTrackInfo()
+			if self.mpdclient.status()['state'] in ['pause', 'stop']:
+				self.mpd_paused =  0
+			else:
+				self.mpd_paused = 1
+				if self.mpd_song.has_key('title'):
+					info.title = self.mpd_song['title']
+				else:
+					info.title = ''
+				if self.mpd_song.has_key('album'):
+					info.album = self.mpd_song['album']
+				else:
+					info.album = ''
+				if self.mpd_song.has_key('artist'):
+					info.artist = self.mpd_song['artist']
+				else:
+					info.artist = ''
+				if self.mpd_song.has_key('time'):
+					info.duration = self.mpd_song['time']
+				else:
+					info.duration = ''
+				if self.mpd_song.has_key('track'):
+					info.track_number = self.mpd_song['track']
+				else:
+					info.track_number = ''
+
+			info.paused = self.mpd_paused
+		except:
+			info = None
+			self.mpd_is_here = False
+
+		if self.mpd_current_song != self.mpd_song:
+			self.emit('music-track-changed', info)
+			self.mpd_current_song = self.mpd_song
+		if self.mpd_paused != self.mpd_paused_before:
+			self.emit('music-track-changed', info)
+			self.mpd_paused_before = self.mpd_paused
+		return True
+
 	def get_playing_track(self):
 		'''Return a MusicTrackInfo for the currently playing
 		song, or None if no song is playing'''
